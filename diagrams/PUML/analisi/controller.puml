@startuml

class Controller <<Control>> {


- static _instance: Controller;
- ristoranteDAO: RistoranteDAO;
- utenteDAO: UtenteDAO;
- contoDAO: ContoDAO;
- ordinazioneDAO: OrdinazioneDAO;
- elementoMenuDAO: ElementoDAO;
- categoriaDAO: CategoriaDAO;
+static getInstance() : Controller 

+getOrdinazioniDaEvadere() : Promise<Ordinazioni>
+getOrdinazioniEvaseUltime24h() : Promise<Ordinazioni>
+evadi(ordine : Ordinazione) : void
+updateOrdine(ordine: Ordinazione) : void
+creaRistorante(ristorante : Ristorante) : void
+getRistoranti() : Ristorante[]
+getRistorante(id : string) : Promise<Ristorante>
+getCategorie() : Promise<Categoria[]>
+creaCategoria(Categoria categoria) : void 
+modificaCategoria(c : Categoria, id : number) : void
+chiudiConto(conto : Conto) : void
+getContiTavoli() : Promise<Conto[]>
+getElementiCategoria(idCategoria: number): Promise<Elemento[]>
+eliminaElementoCategoria(idElemento): void
+aggiungiElementoCategoria(elemento: Elemento, idCategoria: number): void
+spostaElementiCategoria(idElemento1: number, idCategoria: number): void
+modificaElementoCategoria(elementoDaModificare: Elemento): void
+getUtenti(idRistorante: number): Promise<Utente[]>
+insertUtente(popupForm) : void
+aggiornaListaUtenti() : void
+getRistoranteAttuale(): Ristorante
+getCategorie(idRistorante: number): Promise<Categoria[]>
+inviaOrdineAllaCucina(codiceTavolo: string, elementi: ElementoConQuantita, idRistorante: number): void
+registraUtente(email: string, password: string) : Promise<boolean>
+accediUtente(email: string, password: string) : Promise<LoginPayLoad>
+getUtenti(id: number): Promise<Utente[]>
+getNumeroOrdiniEvasiPerUtente(): Promise<{giorno: string, numero_ordinazioni: number}[]>

}

@enduml